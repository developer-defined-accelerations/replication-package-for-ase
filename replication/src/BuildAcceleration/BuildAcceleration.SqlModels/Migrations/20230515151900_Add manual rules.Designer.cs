// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using ForecastBuildTime.SqlModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ForecastBuildTime.SqlModels.Migrations
{
    [DbContext(typeof(ForecastingContext))]
    [Migration("20230515151900_Add manual rules")]
    partial class Addmanualrules
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ForecastBuildTime.SqlModels.AccelerationSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildCount")
                        .HasColumnType("integer");

                    b.Property<List<KMeansClusters>>("ClusterCentersLog")
                        .HasColumnType("jsonb");

                    b.Property<Dictionary<string, bool>>("HitManualRules")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue(new Dictionary<string, bool>());

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MmreAverage")
                        .HasColumnType("double precision");

                    b.Property<double>("MmreLinearRegression")
                        .HasColumnType("double precision");

                    b.Property<double>("MmreSlidingWindow")
                        .HasColumnType("double precision");

                    b.Property<string>("VcsUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VcsUrl", "JobName")
                        .IsUnique();

                    b.ToTable("AccelerationSamples");
                });

            modelBuilder.Entity("ForecastBuildTime.SqlModels.BuildEntrySlim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<IDictionary<string, object>>("AttachedProperties")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("Branch")
                        .HasColumnType("text");

                    b.Property<string>("BuildUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("CircleYmlHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSteps")
                        .HasColumnType("integer");

                    b.Property<int>("Parallel")
                        .HasColumnType("integer");

                    b.Property<bool>("SelectedSuccess")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("SumOfBuildTimeInSteps")
                        .HasColumnType("interval");

                    b.Property<string>("VcsRevision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VcsUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Why")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkflowName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildUrl")
                        .IsUnique();

                    b.HasIndex("VcsUrl");

                    b.HasIndex("VcsUrl", "JobName");

                    b.HasIndex("VcsUrl", "SelectedSuccess");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("ForecastBuildTime.SqlModels.CircleYml", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Sha256")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Sha256");

                    b.ToTable("CircleYmls");
                });

            modelBuilder.Entity("ForecastBuildTime.SqlModels.JobInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxNonZeroBuildCountPerMonth")
                        .HasColumnType("integer");

                    b.Property<bool>("MeetMinimumSampleSize")
                        .HasColumnType("boolean");

                    b.Property<int>("NonZeroBuildCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Random")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("RandomValueCreated")
                        .HasColumnType("boolean");

                    b.Property<bool>("SampledToInspect")
                        .HasColumnType("boolean");

                    b.Property<string>("VcsUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VcsUrl", "JobName")
                        .IsUnique();

                    b.ToTable("JobInfos");
                });

            modelBuilder.Entity("ForecastBuildTime.SqlModels.KMeansClusters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Higher")
                        .HasColumnType("double precision");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Lower")
                        .HasColumnType("double precision");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VcsUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VcsUrl", "JobName", "Month")
                        .IsUnique();

                    b.ToTable("KMeansClusters");
                });

            modelBuilder.Entity("ForecastBuildTime.SqlModels.PredictionEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Approach")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BuildCount")
                        .HasColumnType("integer");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MMRE")
                        .HasColumnType("double precision");

                    b.Property<JsonDocument>("PredictedValues")
                        .HasColumnType("jsonb");

                    b.Property<double>("RSquared")
                        .HasColumnType("double precision");

                    b.Property<string>("VcsUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VcsUrl", "JobName", "Approach")
                        .IsUnique();

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("ForecastBuildTime.SqlModels.AccelerationSample", b =>
                {
                    b.OwnsOne("ForecastBuildTime.SqlModels.ShapiroWilk", "ShapiroWilk", b1 =>
                        {
                            b1.Property<int>("AccelerationSampleId")
                                .HasColumnType("integer");

                            b1.Property<double>("P")
                                .HasColumnType("double precision");

                            b1.Property<double>("W")
                                .HasColumnType("double precision");

                            b1.HasKey("AccelerationSampleId");

                            b1.ToTable("AccelerationSamples");

                            b1.WithOwner()
                                .HasForeignKey("AccelerationSampleId");
                        });

                    b.Navigation("ShapiroWilk");
                });

            modelBuilder.Entity("ForecastBuildTime.SqlModels.KMeansClusters", b =>
                {
                    b.HasOne("ForecastBuildTime.SqlModels.AccelerationSample", "AccelerationSample")
                        .WithMany("ClusterCenters")
                        .HasForeignKey("VcsUrl", "JobName")
                        .HasPrincipalKey("VcsUrl", "JobName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccelerationSample");
                });

            modelBuilder.Entity("ForecastBuildTime.SqlModels.AccelerationSample", b =>
                {
                    b.Navigation("ClusterCenters");
                });
#pragma warning restore 612, 618
        }
    }
}
