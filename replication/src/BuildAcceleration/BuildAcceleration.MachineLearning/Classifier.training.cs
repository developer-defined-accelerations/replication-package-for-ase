﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace ForecastBuildTime.MachineLearning
{
    public partial class Classifier
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new[] { new InputOutputColumnPair(@"StartTime", @"StartTime"), new InputOutputColumnPair(@"Parallel", @"Parallel"), new InputOutputColumnPair(@"Added", @"Added"), new InputOutputColumnPair(@"Deleted", @"Deleted"), new InputOutputColumnPair(@"Modified", @"Modified"), new InputOutputColumnPair(@"Renamed", @"Renamed"), new InputOutputColumnPair(@"Copied", @"Copied") })
                                    .Append(mlContext.Transforms.Conversion.ConvertType(new[] { new InputOutputColumnPair(@"NoDependencyCache", @"NoDependencyCache"), new InputOutputColumnPair(@"Oss", @"Oss"), new InputOutputColumnPair(@"IsRetry", @"IsRetry"), new InputOutputColumnPair(@"SshDisabled", @"SshDisabled"), new InputOutputColumnPair(@"IsUser", @"IsUser"), new InputOutputColumnPair(@"IsMerged", @"IsMerged") }))
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new[] { @"StartTime", @"Parallel", @"Added", @"Deleted", @"Modified", @"Renamed", @"Copied", @"NoDependencyCache", @"Oss", @"IsRetry", @"SshDisabled", @"IsUser", @"IsMerged" }))
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))
                                    .Append(mlContext.BinaryClassification.Trainers.SdcaLogisticRegression(new SdcaLogisticRegressionBinaryTrainer.Options() { L1Regularization = 1F, L2Regularization = 0.1F, LabelColumnName = @"BeyoundThreshold", FeatureColumnName = @"Features" }));

            return pipeline;
        }
    }
}
