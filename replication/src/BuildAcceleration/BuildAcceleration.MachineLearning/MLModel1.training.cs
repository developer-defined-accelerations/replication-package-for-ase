﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace ForecastBuildTime.MachineLearning
{
    public partial class MLModel1
    {
        public static ITransformer RetrainPipeline(MLContext context, IDataView trainData)
        {
            var pipeline = BuildPipeline(context);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair(@"IsRetry", @"IsRetry"), new InputOutputColumnPair(@"SshDisabled", @"SshDisabled"), new InputOutputColumnPair(@"Timedout", @"Timedout"), new InputOutputColumnPair(@"IsUser", @"IsUser"), new InputOutputColumnPair(@"IsMerged", @"IsMerged") })
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new[] { new InputOutputColumnPair(@"StartTime", @"StartTime"), new InputOutputColumnPair(@"NumberOfSteps", @"NumberOfSteps"), new InputOutputColumnPair(@"NoDependencyCache", @"NoDependencyCache"), new InputOutputColumnPair(@"Oss", @"Oss"), new InputOutputColumnPair(@"Parallel", @"Parallel"), new InputOutputColumnPair(@"Added", @"Added"), new InputOutputColumnPair(@"Deleted", @"Deleted"), new InputOutputColumnPair(@"Modified", @"Modified"), new InputOutputColumnPair(@"Renamed", @"Renamed"), new InputOutputColumnPair(@"Copied", @"Copied") }))
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new[] { @"IsRetry", @"SshDisabled", @"Timedout", @"IsUser", @"IsMerged", @"StartTime", @"NumberOfSteps", @"NoDependencyCache", @"Oss", @"Parallel", @"Added", @"Deleted", @"Modified", @"Renamed", @"Copied" }))
                                    .Append(mlContext.Regression.Trainers.LightGbm(new LightGbmRegressionTrainer.Options() { NumberOfLeaves = 4, MinimumExampleCountPerLeaf = 128, NumberOfIterations = 57, MaximumBinCountPerFeature = 207, LearningRate = 0.408410745363474F, LabelColumnName = @"BuildTime", FeatureColumnName = @"Features", Booster = new GradientBooster.Options() { SubsampleFraction = 0.862676329655128F, FeatureFraction = 0.976059826824893F, L1Regularization = 0.00847825187871892F, L2Regularization = 343.109556408471F } }));

            return pipeline;
        }
    }
}
