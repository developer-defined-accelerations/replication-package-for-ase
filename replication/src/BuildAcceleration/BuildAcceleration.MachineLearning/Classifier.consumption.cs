// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace ForecastBuildTime.MachineLearning
{
    public partial class Classifier
    {
        /// <summary>
        /// model input class for Classifier.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"BuildUrl")]
            public string BuildUrl { get; set; }

            [ColumnName(@"StartTime")]
            public float StartTime { get; set; }

            [ColumnName(@"BuildTime")]
            public float BuildTime { get; set; }

            [ColumnName(@"NumberOfSteps")]
            public float NumberOfSteps { get; set; }

            [ColumnName(@"NoDependencyCache")]
            public bool NoDependencyCache { get; set; }

            [ColumnName(@"Oss")]
            public bool Oss { get; set; }

            [ColumnName(@"Parallel")]
            public float Parallel { get; set; }

            [ColumnName(@"IsRetry")]
            public bool IsRetry { get; set; }

            [ColumnName(@"SshDisabled")]
            public bool SshDisabled { get; set; }

            [ColumnName(@"Timedout")]
            public float Timedout { get; set; }

            [ColumnName(@"BuildNum")]
            public float BuildNum { get; set; }

            [ColumnName(@"IsUser")]
            public bool IsUser { get; set; }

            [ColumnName(@"IsMerged")]
            public bool IsMerged { get; set; }

            [ColumnName(@"Added")]
            public float Added { get; set; }

            [ColumnName(@"Deleted")]
            public float Deleted { get; set; }

            [ColumnName(@"Modified")]
            public float Modified { get; set; }

            [ColumnName(@"Renamed")]
            public float Renamed { get; set; }

            [ColumnName(@"Copied")]
            public float Copied { get; set; }

            [ColumnName(@"BeyoundThreshold")]
            public bool BeyoundThreshold { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for Classifier.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"BuildUrl")]
            public string BuildUrl { get; set; }

            [ColumnName(@"StartTime")]
            public float StartTime { get; set; }

            [ColumnName(@"BuildTime")]
            public float BuildTime { get; set; }

            [ColumnName(@"NumberOfSteps")]
            public float NumberOfSteps { get; set; }

            [ColumnName(@"NoDependencyCache")]
            public float NoDependencyCache { get; set; }

            [ColumnName(@"Oss")]
            public float Oss { get; set; }

            [ColumnName(@"Parallel")]
            public float Parallel { get; set; }

            [ColumnName(@"IsRetry")]
            public float IsRetry { get; set; }

            [ColumnName(@"SshDisabled")]
            public float SshDisabled { get; set; }

            [ColumnName(@"Timedout")]
            public float Timedout { get; set; }

            [ColumnName(@"BuildNum")]
            public float BuildNum { get; set; }

            [ColumnName(@"IsUser")]
            public float IsUser { get; set; }

            [ColumnName(@"IsMerged")]
            public float IsMerged { get; set; }

            [ColumnName(@"Added")]
            public float Added { get; set; }

            [ColumnName(@"Deleted")]
            public float Deleted { get; set; }

            [ColumnName(@"Modified")]
            public float Modified { get; set; }

            [ColumnName(@"Renamed")]
            public float Renamed { get; set; }

            [ColumnName(@"Copied")]
            public float Copied { get; set; }

            [ColumnName(@"BeyoundThreshold")]
            public bool BeyoundThreshold { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public bool PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

            [ColumnName(@"Probability")]
            public float Probability { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("Classifier.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
